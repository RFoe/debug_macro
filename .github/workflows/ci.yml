name: Comprehensive Debug Macro CI

on: 
  push:
    paths-ignore:
      - 'README.md'
      - '.clang-format'
      - '.gitignore'
      - 'docs/**'
      - '*.md'
    branches: [ main, master ]
  pull_request:
    paths-ignore:
      - 'README.md'
      - '.clang-format'
      - '.gitignore'
      - 'docs/**'
      - '*.md'  
    branches: [ main, master ]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: 
          - { name: gcc, cpp: 23, cc: g++, c: gcc }
          - { name: clang, cpp: 23, cc: clang++, c: clang }
          - { name: msvc, cpp: 23, cc: cl, c: cl }
        build_type: [Debug, Release]
        exclude:
          # 排除不兼容的组合
          - os: windows-latest
            compiler: { name: gcc, cpp: 23, cc: g++, c: gcc }
          - os: windows-latest
            compiler: { name: clang, cpp: 23, cc: clang++, c: clang }

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # 设置编译器
    - name: Setup MSVC
      if: matrix.compiler.name == 'msvc' && runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: latest

    - name: Setup GCC
      if: matrix.compiler.name == 'gcc' && runner.os == 'Linux'
      uses: egor-tensin/setup-gcc@v1
      with:
        version: latest
        platform: x64

    - name: Setup Clang
      if: matrix.compiler.name == 'clang' && runner.os == 'Linux'
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: x64

    # 设置 CMake
    - name: Setup CMake
      uses: lukka/get-cmake@latest

    # 创建构建目录
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    # 配置 CMake
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake \
          $GITHUB_WORKSPACE \
          -DCMAKE_CXX_COMPILER=${{matrix.job.compiler}} \
          -DCMAKE_CXX_STANDARD=${{matrix.job.cpp_standard}} \
          -DCMAKE_CXX_STANDARD_REQUIRED=ON \
          -DCMAKE_BUILD_TYPE=${{matrix.job.build_type}}

    # 构建
    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config ${{ matrix.build_type }}

    # 运行测试
    - name: Run Tests
      working-directory: ${{runner.workspace}}/build
      run: ctest -V -C ${{ matrix.build_type }}

    # 运行示例二进制文件
    - name: Run Example Binaries
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          ./${{ matrix.build_type }}/debug_macro_basic_example.exe
          ./${{ matrix.build_type }}/debug_macro_advanced_example.exe
        else
          ./debug_macro_basic_example
          ./debug_macro_advanced_example
        fi

  # 可选：代码分析
  code-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
        cppcheck --enable=all --suppress=missingIncludeSystem .
